{"version":3,"sources":["actions/actions.js","actions/robots.js","reducers/players.js","components/Roll.js","components/Figure.js","components/Field.js","App.js","reducers/current.js","reducers/roll.js","reducers/light.js","reducers/index.js","index.js"],"names":["ADD_FIGURE","ROLL","SAVE","SWITCH_PLAYER","RESET_ROLL","CHANGE_STATE","AVAILABLE_MOVES","MOVE_FIGURE","REMOVE_FIGURE","INFO","RESET","LIGHT_ON","LIGHT_OFF","addFigure","player","spot","type","roll","value","resetRoll","changeState","state","removeFigure","field","setInfo","info","lightOn","target","probability","AGGRESSIVE_ROBOT_PLAYER","randomRobotPlayer","players","currentPlayer","newRollFlipped","rollFlipped","robotPlayerPossibleMoves","possibleMovesOfFigures","move","Math","floor","random","length","possibleMoves","AWAITS_ROLL","SELECTS_FIGURE","isBlueRobot","isGreenRobot","initialState","blue","saved","inGame","spare","robot","isRobot","moves","figures","green","playersReducer","action","playerState","push","Object","assign","replacedFigures","forEach","figure","from","to","reducedFigures","newRoll","dispatch","rollValue","rollResult","nextPlayer","mapField","analyseBoard","probabilityOfLooseFigure","targetField","otherPlayerFigures","probabilitiesOfRollResult","0","1","2","3","4","opponentTargetField","currentPlayerFigures","mapIndexes","includes","fields","map","mapIndex","Roll","useSelector","current","useDispatch","onClick","className","Figure","props","shiftFigure","save","window","confirm","toUpperCase","resetGame","opponent","moveFigure","plusFigure","Field","light","gameStateForCurrent","movesForCurrent","movesFlattened","item","entryFieldId","currentPlayerFigure","content","keys","find","id","css","clickable","hoverable","mappedIndex","onMouseOver","onMouseOut","abs","parseInt","substring","index","otherPlayer","App","shallowEqual","robotMove","result","orderbyProbability","sort","a","b","undefined","defensiveRobotPlayer","filterOutOpponentPositions","filter","x","selectRandomMove","pacifistRobotPlayer","aggressiveRobotPlayer","_","useEffect","setTimeout","colSpan","split","key","firstPlayer","currentReducer","rollReducer","lightReducer","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd05ea62.chunk.js","sourcesContent":["export const ADD_FIGURE = \"ADD_FIGURE\";\r\nexport const ROLL = \"ROLL\";\r\nexport const SAVE = \"SAVE\";\r\nexport const SWITCH_PLAYER = \"SWITCH_PLAYER\";\r\nexport const RESET_ROLL = \"RESET_ROLL\";\r\nexport const CHANGE_STATE = \"CHANGE_STATE\";\r\nexport const AVAILABLE_MOVES = \"AVAILABLE_MOVES\";\r\nexport const MOVE_FIGURE = \"MOVE_FIGURE\";\r\nexport const REMOVE_FIGURE = \"REMOVE_FIGURE\";\r\nexport const INFO = \"INFO\";\r\nexport const RESET = \"RESET\";\r\nexport const LIGHT_ON = \"LIGHT_ON\";\r\nexport const LIGHT_OFF = \"LIGHT_OFF\";\r\n\r\nexport const addFigure = (player, spot) => ({ type: ADD_FIGURE, player, spot });\r\nexport const roll = (value) => ({ type: ROLL, value });\r\nexport const save = (player) => ({ type: SAVE, player });\r\nexport const switchPlayer = () => ({ type: SWITCH_PLAYER });\r\nexport const resetRoll = () => ({ type: RESET_ROLL });\r\nexport const changeState = (player, state) => ({ type: CHANGE_STATE, player, state });\r\nexport const setAvailableMoves = (player, moves) => ({ type: AVAILABLE_MOVES, player, moves });\r\nexport const moveFigure = (player, from, to) => ({ type: MOVE_FIGURE, player, from, to });\r\nexport const removeFigure = (player, field) => ({ type: REMOVE_FIGURE, player, field });\r\nexport const setInfo = (player, info) => ({ type: INFO, player, info });\r\nexport const reset = () => ({ type: RESET });\r\nexport const lightOn = (player, target, probability) => ({ type: LIGHT_ON, player, target, probability });\r\nexport const lightOff = () => ({ type: LIGHT_OFF });\r\n","import { rollFlipped, possibleMovesOfFigures } from \"../components/Roll\";\r\nimport { mapIndex } from \"../App\";\r\n\r\nexport const RANDOM_ROBOT_PLAYER = \"RANDOM_ROBOT_PLAYER\";\r\nexport const DEFENSIVE_ROBOT_PLAYER = \"DEFENSIVE_ROBOT_PLAYER\";\r\nexport const PACIFIST_ROBOT_PLAYER = \"PACIFIST_ROBOT_PLAYER\";\r\nexport const AGGRESSIVE_ROBOT_PLAYER = \"AGGRESSIVE_ROBOT_PLAYER\";\r\n\r\nexport const randomRobotPlayer = (players, currentPlayer) => {\r\n    const newRollFlipped = rollFlipped();\r\n    const robotPlayerPossibleMoves = possibleMovesOfFigures(\r\n        players,\r\n        currentPlayer,\r\n        newRollFlipped\r\n    );\r\n\r\n    const selectRandomMove = Math.floor(\r\n        Math.random() * robotPlayerPossibleMoves.length\r\n    );\r\n\r\n    return {\r\n        move: robotPlayerPossibleMoves[selectRandomMove],\r\n        roll: newRollFlipped,\r\n        possibleMoves: robotPlayerPossibleMoves,\r\n    };\r\n};\r\n\r\nexport const defensiveRobotPlayer = (players, currentPlayer) => {\r\n    const newRollFlipped = rollFlipped();\r\n    const robotPlayerPossibleMoves = possibleMovesOfFigures(\r\n        players,\r\n        currentPlayer,\r\n        newRollFlipped\r\n    );\r\n\r\n    const orderbyProbability = robotPlayerPossibleMoves.sort(\r\n        (a, b) => a.probability - b.probability\r\n    );\r\n\r\n    return {\r\n        move: orderbyProbability.length > 0 ? orderbyProbability[0] : undefined,\r\n        roll: newRollFlipped,\r\n        possibleMoves: robotPlayerPossibleMoves,\r\n    };\r\n};\r\n\r\nexport const pacifistRobotPlayer = (players, currentPlayer) => {\r\n    const newRollFlipped = rollFlipped();\r\n    const robotPlayerPossibleMoves = possibleMovesOfFigures(\r\n        players,\r\n        currentPlayer,\r\n        newRollFlipped\r\n    );\r\n\r\n    const otherPlayerFigures = players[\r\n        currentPlayer === \"blue\" ? \"green\" : \"blue\"\r\n    ].figures.map((value) => mapIndex(value));\r\n\r\n    const filterOutOpponentPositions = robotPlayerPossibleMoves.filter(\r\n        (x) => !otherPlayerFigures.includes(x.target)\r\n    );\r\n\r\n    if (filterOutOpponentPositions.length > 0) {\r\n        const selectRandomMove = Math.floor(\r\n            Math.random() * filterOutOpponentPositions.length\r\n        );\r\n\r\n        return {\r\n            move: filterOutOpponentPositions[selectRandomMove],\r\n            roll: newRollFlipped,\r\n            possibleMoves: robotPlayerPossibleMoves,\r\n        };\r\n    } else {\r\n        const selectRandomMove = Math.floor(\r\n            Math.random() * robotPlayerPossibleMoves.length\r\n        );\r\n\r\n        return {\r\n            move: robotPlayerPossibleMoves\r\n                ? robotPlayerPossibleMoves[selectRandomMove]\r\n                : undefined,\r\n            roll: newRollFlipped,\r\n            possibleMoves: robotPlayerPossibleMoves,\r\n        };\r\n    }\r\n};\r\n\r\nexport const aggressiveRobotPlayer = (players, currentPlayer) => {\r\n    const newRollFlipped = rollFlipped();\r\n    const robotPlayerPossibleMoves = possibleMovesOfFigures(\r\n        players,\r\n        currentPlayer,\r\n        newRollFlipped\r\n    );\r\n\r\n    const orderbyProbability = robotPlayerPossibleMoves.sort(\r\n        (a, b) => b.probability - a.probability\r\n    );\r\n\r\n    return {\r\n        move: orderbyProbability.length > 0 ? orderbyProbability[0] : undefined,\r\n        roll: newRollFlipped,\r\n        possibleMoves: robotPlayerPossibleMoves,\r\n    };\r\n};\r\n","import {\r\n    SAVE,\r\n    ADD_FIGURE,\r\n    CHANGE_STATE,\r\n    AVAILABLE_MOVES,\r\n    MOVE_FIGURE,\r\n    REMOVE_FIGURE,\r\n    INFO,\r\n    RESET,\r\n} from \"../actions/actions\";\r\nimport {\r\n    RANDOM_ROBOT_PLAYER,\r\n    DEFENSIVE_ROBOT_PLAYER,\r\n    PACIFIST_ROBOT_PLAYER,\r\n    AGGRESSIVE_ROBOT_PLAYER,\r\n} from \"../actions/robots\";\r\n\r\nexport const AWAITS_ROLL = \"AWAITS_ROLL\";\r\nexport const SELECTS_FIGURE = \"SELECTS_FIGURE\";\r\n\r\nconst isBlueRobot = false;\r\nconst isGreenRobot = true;\r\n\r\nconst initialState = {\r\n    blue: {\r\n        saved: 0,\r\n        inGame: 0,\r\n        spare: 7,\r\n        info: \"\",\r\n        state: AWAITS_ROLL,\r\n        robot: { isRobot: isBlueRobot, type: \"REAL_PLAYER\" },\r\n        moves: [],\r\n        figures: [],\r\n    },\r\n    green: {\r\n        saved: 0,\r\n        inGame: 0,\r\n        spare: 7,\r\n        info: \"\",\r\n        robot: { isRobot: isGreenRobot, type: AGGRESSIVE_ROBOT_PLAYER },\r\n        state: AWAITS_ROLL,\r\n        moves: [],\r\n        figures: [],\r\n    },\r\n};\r\n\r\nconst playersReducer = (state = initialState, action) => {\r\n    let playerState = {};\r\n\r\n    if (action.type === ADD_FIGURE) {\r\n        playerState[action.player] = state[action.player];\r\n        playerState[action.player].figures.push(action.spot);\r\n        playerState[action.player].spare = state[action.player].spare - 1;\r\n        playerState[action.player].inGame = state[action.player].inGame + 1;\r\n        return Object.assign({}, state, playerState);\r\n    } else if (action.type === SAVE) {\r\n        playerState[action.player] = state[action.player];\r\n        playerState[action.player].saved = state[action.player].saved + 1;\r\n        playerState[action.player].spare = state[action.player].spare - 1;\r\n        return Object.assign({}, state, playerState);\r\n    } else if (action.type === CHANGE_STATE) {\r\n        playerState[action.player] = state[action.player];\r\n        playerState[action.player].state = action.state;\r\n        return Object.assign({}, state, playerState);\r\n    } else if (action.type === AVAILABLE_MOVES) {\r\n        playerState[action.player] = state[action.player];\r\n        playerState[action.player].moves = action.moves;\r\n        return Object.assign({}, state, playerState);\r\n    } else if (action.type === MOVE_FIGURE) {\r\n        playerState[action.player] = state[action.player];\r\n        let replacedFigures = [];\r\n        state[action.player].figures.forEach((figure) => {\r\n            if (figure !== action.from) {\r\n                replacedFigures.push(figure);\r\n            }\r\n        });\r\n        replacedFigures.push(action.to);\r\n        playerState[action.player].figures = replacedFigures;\r\n        return Object.assign({}, state, playerState);\r\n    } else if (action.type === REMOVE_FIGURE) {\r\n        playerState[action.player] = state[action.player];\r\n        let reducedFigures = [];\r\n        state[action.player].figures.forEach((figure) => {\r\n            if (figure !== action.field) {\r\n                reducedFigures.push(figure);\r\n            }\r\n        });\r\n        playerState[action.player].figures = reducedFigures;\r\n        playerState[action.player].inGame = state[action.player].inGame - 1;\r\n        playerState[action.player].spare = state[action.player].spare + 1;\r\n        return Object.assign({}, state, playerState);\r\n    } else if (action.type === INFO) {\r\n        playerState[action.player] = state[action.player];\r\n        playerState[action.player].info = action.info;\r\n        return Object.assign({}, state, playerState);\r\n    } else if (action.type === RESET) {\r\n        return {\r\n            blue: {\r\n                saved: 0,\r\n                inGame: 0,\r\n                spare: 7,\r\n                info: \"\",\r\n                state: AWAITS_ROLL,\r\n                robot: { isRobot: isBlueRobot, type: \"REAL_PLAYER\" },\r\n                moves: [],\r\n                figures: [],\r\n            },\r\n            green: {\r\n                saved: 0,\r\n                inGame: 0,\r\n                spare: 7,\r\n                info: \"\",\r\n                state: AWAITS_ROLL,\r\n                robot: { isRobot: isGreenRobot, type: \"REAL_PLAYER\" },\r\n                moves: [],\r\n                figures: [],\r\n            },\r\n        };\r\n    } else {\r\n        return state;\r\n    }\r\n};\r\nexport default playersReducer;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    roll,\r\n    addFigure,\r\n    resetRoll,\r\n    changeState,\r\n    setAvailableMoves,\r\n    setInfo,\r\n} from \"../actions/actions\";\r\nimport { AWAITS_ROLL, SELECTS_FIGURE } from \"../reducers/players\";\r\nimport { mapField, mapIndex, nextPlayer } from \"../App\";\r\n\r\nexport const rollFlipped = () =>\r\n    Math.floor(Math.random() * 2) +\r\n    Math.floor(Math.random() * 2) +\r\n    Math.floor(Math.random() * 2) +\r\n    Math.floor(Math.random() * 2);\r\n\r\nexport const newRoll = (\r\n    dispatch,\r\n    players,\r\n    currentPlayer,\r\n    rollValue = rollFlipped()\r\n) => {\r\n    const rollResult = rollValue;\r\n\r\n    dispatch(roll(rollResult));\r\n\r\n    if (rollResult === 0) {\r\n        dispatch(setInfo(currentPlayer, \"Rolled 0|Losing Turn\"));\r\n        nextPlayer(dispatch, currentPlayer);\r\n    } else {\r\n        if (players[currentPlayer].figures.length === 0) {\r\n            dispatch(\r\n                addFigure(currentPlayer, mapField(rollResult, currentPlayer))\r\n            );\r\n            if (rollResult === 4) {\r\n                dispatch(changeState(currentPlayer, AWAITS_ROLL));\r\n                dispatch(setInfo(currentPlayer, \"Special Field|Extra Turn\"));\r\n                dispatch(resetRoll());\r\n            } else {\r\n                nextPlayer(dispatch, currentPlayer);\r\n            }\r\n        } else {\r\n            analyseBoard(dispatch, rollResult, players, currentPlayer);\r\n        }\r\n    }\r\n};\r\n\r\nconst probabilityOfLooseFigure = (targetField, otherPlayerFigures) => {\r\n    let probabilityOfLooseFigure = 0;\r\n\r\n    const probabilitiesOfRollResult = {\r\n        0: 1 / 2,\r\n        1: 1 / 2,\r\n        2: (1 / 2) * (1 / 2),\r\n        3: (1 / 2) * (1 / 3),\r\n        4: (1 / 2) * (1 / 4),\r\n    };\r\n\r\n    [1, 2, 3, 4].forEach((rollResult) => {\r\n        otherPlayerFigures.forEach((value) => {\r\n            const opponentTargetField = value + rollResult;\r\n            if (opponentTargetField <= 12 && opponentTargetField >= 5) {\r\n                if (targetField !== 8 && opponentTargetField === targetField) {\r\n                    probabilityOfLooseFigure +=\r\n                        probabilitiesOfRollResult[rollResult];\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    return probabilityOfLooseFigure;\r\n};\r\n\r\nexport const possibleMovesOfFigures = (players, currentPlayer, rollResult) => {\r\n    let currentPlayerFigures = mapIndexes(players[currentPlayer].figures);\r\n    const otherPlayerFigures = mapIndexes(\r\n        players[currentPlayer === \"blue\" ? \"green\" : \"blue\"].figures\r\n    );\r\n\r\n    let possibleMoves = [];\r\n    if (players[currentPlayer].spare > 0) {\r\n        currentPlayerFigures.push(0);\r\n    }\r\n\r\n    currentPlayerFigures.forEach((value) => {\r\n        const targetField = value + rollResult;\r\n        if (targetField <= 15) {\r\n            if (!currentPlayerFigures.includes(targetField)) {\r\n                if (\r\n                    targetField !== 8 ||\r\n                    (targetField === 8 && !otherPlayerFigures.includes(8))\r\n                ) {\r\n                    possibleMoves.push({\r\n                        field: value,\r\n                        target: targetField,\r\n                        rollResult: rollResult,\r\n                        probability:\r\n                            targetField >= 5 &&\r\n                            targetField <= 12 &&\r\n                            targetField !== 8\r\n                                ? probabilityOfLooseFigure(\r\n                                      targetField,\r\n                                      otherPlayerFigures\r\n                                  )\r\n                                : 0,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return possibleMoves;\r\n};\r\n\r\nconst mapIndexes = (fields) => fields.map((value) => mapIndex(value));\r\n\r\nconst analyseBoard = (dispatch, rollResult, players, currentPlayer) => {\r\n    let possibleMoves = possibleMovesOfFigures(\r\n        players,\r\n        currentPlayer,\r\n        rollResult\r\n    );\r\n\r\n    if (possibleMoves.length === 0) {\r\n        dispatch(setInfo(currentPlayer, \"No Moves Available\"));\r\n        dispatch(changeState(currentPlayer, AWAITS_ROLL));\r\n        nextPlayer(dispatch, currentPlayer);\r\n    } else {\r\n        dispatch(changeState(currentPlayer, SELECTS_FIGURE));\r\n        dispatch(setAvailableMoves(currentPlayer, possibleMoves));\r\n    }\r\n};\r\n\r\nconst Roll = () => {\r\n    const rollValue = useSelector((state) => state.roll);\r\n    const currentPlayer = useSelector((state) => state.current);\r\n    const players = useSelector((state) => state.players);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            {rollValue === null ? (\r\n                <button\r\n                    onClick={() => newRoll(dispatch, players, currentPlayer)}\r\n                >\r\n                    ROLL\r\n                </button>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n            <h1 className=\"roll\">{rollValue}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Roll;\r\n","import React from \"react\";\r\n\r\nconst Figure = (props) => {\r\n    return (\r\n        <>\r\n            <div className={props.player + \" figure\"}>&nbsp;</div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Figure;\r\n","import React from \"react\";\r\nimport Figure from \"./Figure\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SELECTS_FIGURE, AWAITS_ROLL } from \"../reducers/players\";\r\nimport {\r\n    addFigure,\r\n    changeState,\r\n    moveFigure,\r\n    removeFigure,\r\n    resetRoll,\r\n    save,\r\n    setInfo,\r\n    lightOn,\r\n    lightOff,\r\n} from \"../actions/actions\";\r\nimport { mapField, mapIndex, nextPlayer, resetGame } from \"../App\";\r\n\r\nexport const shiftFigure = (dispatch, players, player, from, to) => {\r\n    dispatch(changeState(player, AWAITS_ROLL));\r\n\r\n    if (to === 15) {\r\n        dispatch(removeFigure(player, from));\r\n        dispatch(save(player));\r\n        if (players[player].saved === 7) {\r\n            if (\r\n                window.confirm(\r\n                    player.toUpperCase() +\r\n                        \" WINS!\\nWould you like to start another game?\"\r\n                )\r\n            ) {\r\n                resetGame(dispatch, player);\r\n            }\r\n        } else {\r\n            dispatch(setInfo(player, \"Figure Saved\"));\r\n            nextPlayer(dispatch, player);\r\n        }\r\n    } else {\r\n        const opponent = player === \"blue\" ? \"green\" : \"blue\";\r\n        const figuresOfOpponent = players[opponent].figures;\r\n        if (figuresOfOpponent.includes(mapField(to, player))) {\r\n            dispatch(removeFigure(opponent, mapField(to, player)));\r\n            dispatch(setInfo(player, \"Figure Beaten\"));\r\n        }\r\n\r\n        dispatch(moveFigure(player, from, mapField(to, player)));\r\n        if ([4, 8, 14].includes(to)) {\r\n            dispatch(setInfo(player, \"Special Field|Extra Turn\"));\r\n            dispatch(resetRoll());\r\n        } else {\r\n            nextPlayer(dispatch, player);\r\n        }\r\n    }\r\n};\r\n\r\nexport const plusFigure = (dispatch, player, target) => {\r\n    dispatch(changeState(player, AWAITS_ROLL));\r\n    dispatch(addFigure(player, mapField(target, player)));\r\n    if (target === 4) {\r\n        dispatch(setInfo(player, \"Special Field|Extra Turn\"));\r\n        dispatch(resetRoll());\r\n    } else {\r\n        nextPlayer(dispatch, player);\r\n    }\r\n};\r\n\r\nconst Field = (props) => {\r\n    const dispatch = useDispatch();\r\n    const players = useSelector((state) => state.players);\r\n    const currentPlayer = useSelector((state) => state.current);\r\n    const light = useSelector((state) => state.light);\r\n    const gameStateForCurrent = players[currentPlayer].state;\r\n    const movesForCurrent = players[currentPlayer].moves;\r\n    const movesFlattened = movesForCurrent.map((item) => item.field);\r\n    const entryFieldId = currentPlayer === \"blue\" ? \"startBlue\" : \"startGreen\";\r\n\r\n    let currentPlayerFigure = null;\r\n    if (!props.content) {\r\n        Object.keys(players).forEach((player) => {\r\n            if (players[player].figures.find((item) => item === props.id)) {\r\n                currentPlayerFigure = player;\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    let content = \"\";\r\n    let css = props.css;\r\n    let clickable = null;\r\n    let hoverable = null;\r\n    let target = null;\r\n    if (props.content) {\r\n        content = props.content;\r\n        if (\r\n            gameStateForCurrent === SELECTS_FIGURE &&\r\n            movesFlattened.includes(0) &&\r\n            props.id === entryFieldId\r\n        ) {\r\n            css += \" available\";\r\n            target = movesForCurrent.find((item) => item.field === 0);\r\n            clickable = () =>\r\n                plusFigure(dispatch, currentPlayer, target.target);\r\n            hoverable = () =>\r\n                dispatch(\r\n                    lightOn(currentPlayer, target.target, target.probability)\r\n                );\r\n        }\r\n    } else if (currentPlayerFigure) {\r\n        content = <Figure player={currentPlayerFigure} />;\r\n        const mappedIndex = mapIndex(props.id);\r\n        if (\r\n            gameStateForCurrent === SELECTS_FIGURE &&\r\n            movesFlattened.includes(mappedIndex) &&\r\n            props.id === mapField(mappedIndex, currentPlayer)\r\n        ) {\r\n            css += \" available\";\r\n            target = movesForCurrent.find(\r\n                (item) => item.field === mapIndex(props.id)\r\n            );\r\n            clickable = () =>\r\n                shiftFigure(\r\n                    dispatch,\r\n                    players,\r\n                    currentPlayer,\r\n                    props.id,\r\n                    target.target\r\n                );\r\n            hoverable = () =>\r\n                dispatch(\r\n                    lightOn(currentPlayer, target.target, target.probability)\r\n                );\r\n        }\r\n        if (\r\n            light &&\r\n            mapField(light.target, light.player) === props.id &&\r\n            currentPlayerFigure !== currentPlayer\r\n        ) {\r\n            css += \" conflict\";\r\n            content = `${light.probability}`;\r\n        }\r\n    } else if (light && mapField(light.target, light.player) === props.id) {\r\n        css += \" target\";\r\n        content = `${light.probability}`;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td\r\n                className={css}\r\n                id={props.id}\r\n                onClick={clickable}\r\n                onMouseOver={hoverable}\r\n                onMouseOut={() => dispatch(lightOff())}\r\n            >\r\n                {content}\r\n            </td>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Field;\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport \"./ur.css\";\r\nimport Roll, { newRoll } from \"./components/Roll\";\r\nimport Field, { shiftFigure, plusFigure } from \"./components/Field\";\r\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\r\nimport { reset, resetRoll, setInfo, switchPlayer } from \"./actions/actions\";\r\nimport {\r\n    randomRobotPlayer,\r\n    defensiveRobotPlayer,\r\n    pacifistRobotPlayer,\r\n    aggressiveRobotPlayer,\r\n    RANDOM_ROBOT_PLAYER,\r\n    DEFENSIVE_ROBOT_PLAYER,\r\n    PACIFIST_ROBOT_PLAYER,\r\n    AGGRESSIVE_ROBOT_PLAYER,\r\n} from \"./actions/robots\";\r\nimport { SELECTS_FIGURE, AWAITS_ROLL } from \"./reducers/players\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport const mapIndex = (field) => Math.abs(parseInt(field.substring(1)));\r\nexport const mapField = (index, player) => {\r\n    if (index < 5 || index > 12) {\r\n        index = player === \"blue\" ? index : -index;\r\n    }\r\n    return \"c\" + index;\r\n};\r\nexport const otherPlayer = (player) => (player === \"blue\" ? \"green\" : \"blue\");\r\nexport const nextPlayer = (dispatch, current) => {\r\n    dispatch(switchPlayer());\r\n    dispatch(setInfo(otherPlayer(current), \"\"));\r\n    dispatch(resetRoll());\r\n};\r\nexport const resetGame = (dispatch, current) => {\r\n    dispatch(reset());\r\n    dispatch(setInfo(current, \"\"));\r\n    dispatch(setInfo(otherPlayer(current), \"\"));\r\n    dispatch(resetRoll());\r\n};\r\n\r\nconst App = () => {\r\n    const current = useSelector((state) => state.current, shallowEqual);\r\n    const players = useSelector((state) => state.players, shallowEqual);\r\n    const dispatch = useDispatch();\r\n\r\n    const robotMove = (players, current) => {\r\n        let result;\r\n        if (players[current].robot.type === RANDOM_ROBOT_PLAYER) {\r\n            result = randomRobotPlayer(players, current);\r\n        } else if (players[current].robot.type === DEFENSIVE_ROBOT_PLAYER) {\r\n            result = defensiveRobotPlayer(players, current);\r\n        } else if (players[current].robot.type === PACIFIST_ROBOT_PLAYER) {\r\n            result = pacifistRobotPlayer(players, current);\r\n        } else if (players[current].robot.type === AGGRESSIVE_ROBOT_PLAYER) {\r\n            result = aggressiveRobotPlayer(players, current);\r\n        } else {\r\n            result = randomRobotPlayer(players, current);\r\n        }\r\n\r\n        newRoll(\r\n            dispatch,\r\n            _.cloneDeep(players),\r\n            _.cloneDeep(current),\r\n            result.roll\r\n        );\r\n\r\n        if (players[current].state === SELECTS_FIGURE && result.move) {\r\n            if (result.move.field === 0) {\r\n                plusFigure(dispatch, current, result.move.target);\r\n            } else {\r\n                shiftFigure(\r\n                    dispatch,\r\n                    players,\r\n                    current,\r\n                    mapField(result.move.field, current),\r\n                    result.move.target\r\n                );\r\n            }\r\n\r\n            if ([4, 8, 14].includes(result.move.target)) {\r\n                robotMove(players, current);\r\n            }\r\n        } else if (players[current].state === AWAITS_ROLL && result.move) {\r\n            if ([4, 8, 14].includes(result.move.target)) {\r\n                robotMove(players, current);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (players[current].robot.isRobot) {\r\n            setTimeout(() => {\r\n                robotMove(players, current);\r\n            }, 200);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td\r\n                            className={\r\n                                \"score\" +\r\n                                (current === \"green\" ? \" current\" : \"\")\r\n                            }\r\n                            colSpan=\"8\"\r\n                        >\r\n                            <h1>Player 1 {players.green.robot.type}</h1>\r\n                            <h2>FIGURES ON START: {players.green.spare}</h2>\r\n                            <h2>IN GAME: {players.green.inGame}</h2>\r\n                            <h2>FIGURES ON END: {players.green.saved}</h2>\r\n                            {current === \"green\" ? <Roll /> : \"\"}\r\n                            <h3>\r\n                                {players.green.info\r\n                                    .split(\"|\")\r\n                                    .map((item, key) => {\r\n                                        return (\r\n                                            <Fragment key={key}>\r\n                                                {item}\r\n                                                <br />\r\n                                            </Fragment>\r\n                                        );\r\n                                    })}\r\n                            </h3>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <Field css=\"green extra\" id=\"c-4\" />\r\n                        <Field css=\"green\" id=\"c-3\" />\r\n                        <Field css=\"green\" id=\"c-2\" />\r\n                        <Field css=\"green\" id=\"c-1\" />\r\n                        <Field css=\"empty\" content=\"&larr;\" id=\"startGreen\" />\r\n                        <Field css=\"empty\" id=\"c-15\" />\r\n                        <Field css=\"green extra\" id=\"c-14\" />\r\n                        <Field css=\"green\" id=\"c-13\" />\r\n                    </tr>\r\n                    <tr>\r\n                        <Field id=\"c5\" />\r\n                        <Field id=\"c6\" />\r\n                        <Field id=\"c7\" />\r\n                        <Field css=\"extra\" id=\"c8\" />\r\n                        <Field id=\"c9\" />\r\n                        <Field id=\"c10\" />\r\n                        <Field id=\"c11\" />\r\n                        <Field id=\"c12\" />\r\n                    </tr>\r\n                    <tr>\r\n                        <Field css=\"blue extra\" id=\"c4\" />\r\n                        <Field css=\"blue\" id=\"c3\" />\r\n                        <Field css=\"blue\" id=\"c2\" />\r\n                        <Field css=\"blue\" id=\"c1\" />\r\n                        <Field css=\"empty\" content=\"&larr;\" id=\"startBlue\" />\r\n                        <Field css=\"empty\" id=\"c15\" />\r\n                        <Field css=\"blue extra\" id=\"c14\" />\r\n                        <Field css=\"blue\" id=\"c13\" />\r\n                    </tr>\r\n                    <tr>\r\n                        <td\r\n                            className={\r\n                                \"score\" + (current === \"blue\" ? \" current\" : \"\")\r\n                            }\r\n                            colSpan=\"8\"\r\n                        >\r\n                            <h1>Player 2 {players.blue.robot.type}</h1>\r\n                            <h2>FIGURES ON START: {players.blue.spare}</h2>\r\n                            <h2>IN GAME: {players.blue.inGame}</h2>\r\n                            <h2>FIGURES ON END: {players.blue.saved}</h2>\r\n                            {current === \"blue\" ? <Roll /> : \"\"}\r\n                            <h3>\r\n                                {players.blue.info\r\n                                    .split(\"|\")\r\n                                    .map((item, key) => {\r\n                                        return (\r\n                                            <Fragment key={key}>\r\n                                                {item}\r\n                                                <br />\r\n                                            </Fragment>\r\n                                        );\r\n                                    })}\r\n                            </h3>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { SWITCH_PLAYER } from \"../actions/actions\";\r\n\r\nconst firstPlayer = Math.floor(Math.random() * 2) ? \"blue\" : \"green\";\r\n\r\nconst currentReducer = (state = firstPlayer, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_PLAYER:\r\n            return state === \"blue\" ? \"green\" : \"blue\";\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default currentReducer;\r\n","import { ROLL, RESET_ROLL } from \"../actions/actions\";\r\n\r\nconst rollReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case ROLL:\r\n            return action.value;\r\n        case RESET_ROLL:\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default rollReducer;\r\n","import { LIGHT_ON, LIGHT_OFF } from \"../actions/actions\";\r\n\r\nconst lightReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case LIGHT_OFF:\r\n            return null;\r\n        case LIGHT_ON:\r\n            return {\r\n                player: action.player,\r\n                target: action.target,\r\n                probability: action.probability\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default lightReducer;\r\n","import currentReducer from \"./current\";\r\nimport rollReducer from \"./roll\";\r\nimport playersReducer from \"./players\";\r\nimport { combineReducers } from \"redux\";\r\nimport lightReducer from \"./light\";\r\n\r\nconst allReducers = combineReducers({\r\n    players: playersReducer,\r\n    current: currentReducer,\r\n    roll: rollReducer,\r\n    light: lightReducer,\r\n});\r\nexport default allReducers;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport allReducers from \"./reducers\";\r\n\r\nconst store = createStore(allReducers);\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}